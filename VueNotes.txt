-- reactivity: kendi kendini tetikler.
-- computed : değişiklik var mı diye kontrol eder ve eğer değişiklik varsa kendi kendine tetiklenir. reaktif olarak değişken gibi davranan metot gibi tanımlanan yapılardır. geriye bir değer return etmesi gerekir.
-- watch: eski ve yeni değeri sürekli izler.

--VUEJS LIFECYCLE--

1- events&lifecycle ---> beforeCreate
2- injections & reactivity ---> created
3- HTML template olarak render edilir. ---> beforeMount
4- app.mount("#app") üretilir ve app ile değiştirilir. 
5- MOUNTED -> Eğer veri değişirse VirtualDOM tekrardan render edilir ve patch işlemi yapılır.
6- beforeUpdate
7- updated
8- Eğer app.unmount() çağırılırsa ---> beforeUnmount
9- unmounted

--Koşula Göre Class Binding
        <div class="col-8 offset-2 p-2">
            <button class="btn btn-sm btn-primary" @click="showContainer = !showContainer">Aç/Kapat</button>

            <h1 v-if="!showContainer" class="text-danger">BAŞLANGIÇTA GÖZÜKECEK</h1>
            <h1 v-else="showContainer" class="text-primary">SONRA GÖZÜKECEK</h1>
            <br />
            <hr />
            <h3 :class="counterBoxClass">{{counter}}</h3>
            <button class="btn btn-sm btn-success" @click="counter++">Artır</button>
            <button class="btn btn-sm btn-danger" @click="counter--">Azalt</button>

            <p v-if="counter<0">Counter Negatif</p>
            <p v-else-if="counter>0">Counter Pozitif</p>
            <p v-else="counter==0">Counter 0</p>

             <hr>

            <p v-show="counter<0">Counter Negatif</p>
            <p v-show="counter>0">Counter Pozitif</p>
            <p v-show="counter==0">Counter 0</p>
          </div>

            const app = Vue.createApp({
            data() {
                return {
                showContainer:false,
                counter:0,
                };
            },
            computed:{
                counterBoxClass(){
                return {'bg-success text-white':this.counter>0,'bg-danger text-white':this.counter<0};
                },
            },
            
            });
            app.mount("#app");


--Loops(Döngü)
foreach döngüsü nasıl oluşturulur?
            <ul class="list-group">
              <li  v-for="todo in todoList" class="list-group-item">{{todo}}</li>
            </ul>


            data() {
                return {
                todoList:["Todo1","Todo2","Todo3","Todo4"],
                };
            },

TodoListteki döngüde v-model="todo.completed" olduğunda checked olunca true olarak değiştiriyor
            <li  v-for="todo in todoList" class="list-group-item d-flex justify-content-between align-items-center">
              <div>
              <input class="form-check-input" type="checkbox" v-model="todo.completed"  id="flexCheckDefault">
              <label class="form-check-label ms-2" for="flexCheckDefault">
                {{todo.text}}
              </label>
            </div>