-- reactivity: kendi kendini tetikler.
-- computed : değişiklik var mı diye kontrol eder ve eğer değişiklik varsa kendi kendine tetiklenir. reaktif olarak değişken gibi davranan metot gibi tanımlanan yapılardır. geriye bir değer return etmesi gerekir.
-- watch: eski ve yeni değeri sürekli izler.

--VUEJS LIFECYCLE--

1- events&lifecycle ---> beforeCreate
2- injections & reactivity ---> created
3- HTML template olarak render edilir. ---> beforeMount
4- app.mount("#app") üretilir ve app ile değiştirilir. 
5- MOUNTED -> Eğer veri değişirse VirtualDOM tekrardan render edilir ve patch işlemi yapılır.
6- beforeUpdate
7- updated
8- Eğer app.unmount() çağırılırsa ---> beforeUnmount
9- unmounted

--Koşula Göre Class Binding
        <div class="col-8 offset-2 p-2">
            <button class="btn btn-sm btn-primary" @click="showContainer = !showContainer">Aç/Kapat</button>

            <h1 v-if="!showContainer" class="text-danger">BAŞLANGIÇTA GÖZÜKECEK</h1>
            <h1 v-else="showContainer" class="text-primary">SONRA GÖZÜKECEK</h1>
            <br />
            <hr />
            <h3 :class="counterBoxClass">{{counter}}</h3>
            <button class="btn btn-sm btn-success" @click="counter++">Artır</button>
            <button class="btn btn-sm btn-danger" @click="counter--">Azalt</button>

            <p v-if="counter<0">Counter Negatif</p>
            <p v-else-if="counter>0">Counter Pozitif</p>
            <p v-else="counter==0">Counter 0</p>

             <hr>

            <p v-show="counter<0">Counter Negatif</p>
            <p v-show="counter>0">Counter Pozitif</p>
            <p v-show="counter==0">Counter 0</p>
          </div>

            const app = Vue.createApp({
            data() {
                return {
                showContainer:false,
                counter:0,
                };
            },
            computed:{
                counterBoxClass(){
                return {'bg-success text-white':this.counter>0,'bg-danger text-white':this.counter<0};
                },
            },
            
            });
            app.mount("#app");


--Loops(Döngü)
foreach döngüsü nasıl oluşturulur?
            <ul class="list-group">
              <li  v-for="todo in todoList" class="list-group-item">{{todo}}</li>
            </ul>


            data() {
                return {
                todoList:["Todo1","Todo2","Todo3","Todo4"],
                };
            },

TodoListteki döngüde v-model="todo.completed" olduğunda checked olunca true olarak değiştiriyor
            <li  v-for="todo in todoList" class="list-group-item d-flex justify-content-between align-items-center">
              <div>
              <input class="form-check-input" type="checkbox" v-model="todo.completed"  id="flexCheckDefault">
              <label class="form-check-label ms-2" for="flexCheckDefault">
                {{todo.text}}
              </label>
            </div>


         ******************************************** HAFTA - 2 *********************************************************

1- VueJS'de COMPONENT Yapısı

-Tekrar edilen GUI parçaları (-Header,Footer,Ürün Kartı)
-Fazla kod bloguna sahip GUI parçaları (Slider, banner gibi)

* js dosyasında;
app.component("appHeader",{options});

buradaki options Vue instance'ları tanımlıyor. Örneğin, 
-data(), methods, 
-reactive propertyler(computed, watch)
-LifeCycle Hooks (beforeCreate,created,beforeMount, mounted,befareUpdate,updated,beforeUnmount,unmounted)
-Ve en önemlisi de template (Template bizim GUI parçaları yani HTML kodunu içerir)

* html sayfasında;
<appHeader/> ya da <appHeader></appHeader>

2- COMPONENT Türleri
2.1 String Template Component --> backtick'içinde kullanılacak template'i yazıyoruz. ancak bu karmaşık gösteriyor, kullanışlı değil.

ÖRNEK: String Template Kullanımı
app.component("counter-item", {
  data() {
    return {
      counter: 0,
    };
  },
  template: `
      <div class="container-sm">
        <h3 class="mb-2">{{counter}}</h3>
        <button @click="counter--" class="red sm">-</button>
        <button @click="counter++"class="green sm">+</button>
      </div>
  `,
});



2.2 Single File Component (SFC)


Componentler Arası Veri İletişimi

-Componentler kod tekrarını engelleyen, içerisinde HTML Kodları da bulunduran yapılardır. Yani belirli dinamiklere göre içeriği değişebilen yapılardır.
-Bu durumda Componentlerin içeriğini değiştirmek için, onlara dışarıdan veri göndermemiz gerekir. Buna da veri iletişimi denir.
-Vue ile Componentler arasındaki veri şletişimi birkaç yol ile yapılır:
 * Parent >> Child(props)
 * Child >> Parent(custom event)

 Parent: içerisinde farklı farklı componentleri bulunduran component
 Child: bir component içerisinde tanımlanmış / çağırılmış bir component

Parent >> Child 
<TodoList :myData="todoList"/>  //App.vue'dan TodoList componentine veri göndermek
<TodoListItem v-for="todoItem in myData" :key="todoItem.id" :item="todoItem"/> //TodoList'ten TodoListItem'a veri göndermek


Child >> Parent
-Childdan Parenta veri gönderimi yaparken emit kullanıyoruz, bir event üretiyoruz.
-Bu işlemin adına Custom Event Yöntemi denir.

  AppVue:
    <AddSection @add-todo="addNewTodo"/>
    <TodoList @delete-todo-item="deleteItem" :myData="todoList"/>
    <ResultBar :itemCount="todoList.length" />

  AddSection:
  <template>
  <label for="todoText"></label>
  <input v-model="todoText" @keydown.enter="addNewTodo" type="text" id="todoText" placeholder="Bir görev yazınız..." />
</template>

<script>

export default{
  data(){
    return{
      todoText:null,

    };
  },
  methods:{
    addNewTodo(){
      this.$emit("add-todo",this.todoText);
      this.todoText=null;
    },
  },
};
</script>

TodoList:
<template>
  <ul>
      <TodoListItem @delete-todo-item="$emit('delete-todo-item', $event)" v-for="todoItem in myData" :key="todoItem.id" :item="todoItem"/>
  </ul>
</template>
<script>
import TodoListItem from "@/components/TodoListItem.vue"
export default{
  props:[
    "myData"
  ],

    components:{
        TodoListItem,
    }
};
</script>

TodoListItem:

<template>
    <li class="d-flex justify-content-between align-items-center">
      
      <span>{{ item.text }}</span>
      <button  @click="$emit('delete-todo-item', item)" class="sm red">Sil</button>
    </li>
</template>

<script>


export default{
  props:["item"],
  
};

</script>



ResultBar:
<template>
    <small class="mt-2 d-flex justify-content-end green">{{ itemCount }} adet todo vardır</small>
</template>

<script>
export default{
    props:["itemCount",],
}
</script>



Child'a props olarak Function göndermek:
  App.vue:
    <AddSection :addNewTodo="addNewTodo" @add-todo="addNewTodo"/>
AddSection:
<template>
  <label for="todoText"></label>
  <input v-model="todoText" @keydown.enter="addNewTodo(todoText)" type="text" id="todoText" placeholder="Bir görev yazınız..." />
</template>

<script>

export default{
  props:{
    addNewTodo:{
      type:Function,
      required: true,

    },

  },
  data(){
    return{
      todoText:null,

    };
  },
  methods:{
    
  },
};
</script>



İki Componentin birbirleriyle ilişkisi olduğunda birleştirmek

Provide ve Inject

Ana projede hepsini provide edip, ihtiyaç olduğunda inject etmek
